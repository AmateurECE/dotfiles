// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /usr/share/gir-1.0
// from ../gir-1.0
// DO NOT EDIT

use crate::{Core, Object};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "WpPlugin")]
    pub struct Plugin(Object<ffi::WpPlugin, ffi::WpPluginClass>) @extends Object;

    match fn {
        type_ => || ffi::wp_plugin_get_type(),
    }
}

// NOTE: Have to implement these manually to allow wrapping Plugins in Arc, etc. This should be
// accompanied by a review of the wireplumber source to ensure these markers can reasonably be
// supported.
unsafe impl Send for Plugin {}
unsafe impl Sync for Plugin {}

impl Plugin {
    pub const NONE: Option<&'static Plugin> = None;

    #[doc(alias = "wp_plugin_find")]
    pub fn find(core: &Core, plugin_name: &str) -> Option<Plugin> {
        unsafe {
            from_glib_full(ffi::wp_plugin_find(
                core.to_glib_none().0,
                plugin_name.to_glib_none().0,
            ))
        }
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Plugin>> Sealed for T {}
}

pub trait PluginExt: IsA<Plugin> + sealed::Sealed + 'static {
    #[doc(alias = "wp_plugin_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::wp_plugin_get_name(self.as_ref().to_glib_none().0)) }
    }
}

impl<O: IsA<Plugin>> PluginExt for O {}
